[package]
authors = ["Flix <felix.dommes@rwth-aachen.de>"]
categories = ["asynchronous", "concurrency", "database"]
description = "Message/job queue based on bonsaidb, similar to sqlxmq."
documentation = "https://docs.rs/bonsaimq"
edition = "2021"
homepage = "https://github.com/FlixCoder/bonsaimq"
keywords = ["message", "job", "queue", "database", "persistent"]
license = "MIT"
name = "bonsaimq"
readme = "README.md"
repository = "https://github.com/FlixCoder/bonsaimq"
rust-version = "1.85"
version = "0.3.0"

[dependencies]
bonsaidb = "0.5.0"
erased_set = "0.8.0"
getrandom = {version = "0.3.1", features = ["std"]}
serde = {version = "1.0.137", features = ["derive"]}
serde_json = "1.0.81"
thiserror = "2.0.11"
time = "0.3.9"
tokio = {version = "1.25.0", features = ["rt", "time"]}
tokio-retry = "0.3.0"
tracing = "0.1.34"
tracing-futures = "0.2.5"

[dev-dependencies]
bonsaidb = {version = "0.5.0", features = ["local", "async", "client"]}
color-eyre = "0.6.3"
ntest = "0.9.3"
tokio = {version = "1.42.0", features = ["full"]}
tracing-subscriber = {version = "0.3.19", features = ["env-filter"]}

[profile.release]
debug = true
lto = true

# Ignore false positives in cargo udeps
[package.metadata.cargo-udeps.ignore]
normal = ["tracing-futures"]

# Also test the examples
[[example]]
name = "simple"
path = "examples/simple.rs"
test = true

[[example]]
name = "error-handling"
path = "examples/error_handling.rs"
test = true

[[example]]
name = "checkpoints"
path = "examples/checkpoints.rs"
test = true

[[example]]
name = "context"
path = "examples/context.rs"
test = true


[lints.rust]
dead_code = "warn"
missing_debug_implementations = "warn"
missing_docs = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unused_extern_crates = "warn"

[lints.clippy]
tabs_in_doc_comments = "allow" # Rustfmt setting.
unnecessary_lazy_evaluations = "allow" # Performance better, because `Drop`.
allow_attributes_without_reason = "warn"
branches_sharing_code = "warn"
cast_lossless = "warn"
cast_possible_wrap = "warn"
checked_conversions = "warn"
cloned_instead_of_copied = "warn"
create_dir = "warn"
dbg_macro = "warn"
default_trait_access = "warn"
expect_used = "warn"
expl_impl_clone_on_copy = "warn"
fallible_impl_from = "warn"
filetype_is_file = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp = "warn"
fn_params_excessive_bools = "warn"
fn_to_numeric_cast_any = "warn"
future_not_send = "warn"
if_then_some_else_none = "warn"
implicit_clone = "warn"
implicit_hasher = "warn"
implicit_saturating_sub = "warn"
imprecise_flops = "warn"
indexing_slicing = "warn"
inefficient_to_string = "warn"
items_after_statements = "warn"
iter_not_returning_iterator = "warn"
large_digit_groups = "warn"
large_futures = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
many_single_char_names = "warn"
map_unwrap_or = "warn"
mem_forget = "warn"
missing_const_for_fn = "warn"
missing_docs_in_private_items = "warn"
must_use_candidate = "warn"
mut_mut = "warn"
mutex_atomic = "warn"
needless_bitwise_bool = "warn"
non_send_fields_in_send_ty = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
print_stderr = "warn"
print_stdout = "warn"
ptr_as_ptr = "warn"
range_minus_one = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
redundant_closure_for_method_calls = "warn"
ref_binding_to_reference = "warn"
ref_option_ref = "warn"
return_self_not_must_use = "warn"
same_functions_in_if_condition = "warn"
same_name_method = "warn"
str_to_string = "warn"
string_to_string = "warn"
suboptimal_flops = "warn"
suspicious_operation_groupings = "warn"
too_many_lines = "warn"
trait_duplication_in_bounds = "warn"
trivially_copy_pass_by_ref = "warn"
type_repetition_in_bounds = "warn"
undocumented_unsafe_blocks = "warn"
unnested_or_patterns = "warn"
unreadable_literal = "warn"
unseparated_literal_suffix = "warn"
unused_async = "warn"
unused_self = "warn"
unwrap_used = "warn"
used_underscore_binding = "warn"
useless_let_if_seq = "warn"
verbose_file_reads = "warn"
